<?xml version="1.0" encoding="UTF-8"?>
<!--
  dtd: xxx.dtd     document type definition
  xsd: xxx.xsd     xml  schema definition
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:db.properties"/>
    <!-- DataSource:druid -->
    <bean id="druid_03" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小空闲的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
    </bean>
    <!-- SqlSessionFactory
         1. 连接池
         2. mapper文件
         3. 别名
    -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource"  ref="druid_03"/>
        <property name="mapperLocations">
            <array>
                <value>classpath:com/zhj/dao/mapper/*-Mapper.xml</value>
            </array>
        </property>
        <property name="typeAliasesPackage" value="com.zhj.domain"/>
        <property name="plugins">
            <list>
                <bean class="com.github.pagehelper.PageInterceptor"></bean>
            </list>
        </property>
    </bean>

    <!-- MapperScannerConfigurer
         1. 扫描DAO接口
         2. 定制实现
         3. 将DAO实现放入工厂

         依赖：1> dao接口位置
              2> sqlSession
              3> dao-mapper文件位置
         工作模式：将dao实现放入工厂，dao实现在工厂中的id=“首字母小写的接口名”   UserDAO=> userDAO    OrderDAO => orderDAO
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--<property name="basePackage" value="com.zhj.dao,com.order.dao"></property>-->
        <property name="basePackage" value="com.zhj.dao"/>
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    </bean>

    <!-- 事务控制
         依赖：数据源
    -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
        <property name="dataSource" ref="druid_03"/>
    </bean>

    <context:component-scan base-package="com.zhj" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <tx:annotation-driven transaction-manager="txManager"/>

    <import resource="classpath:shiro_spring.xml"/>
</beans>